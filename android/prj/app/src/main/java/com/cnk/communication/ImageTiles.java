/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cnk.communication;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-11")
public class ImageTiles implements org.apache.thrift.TBase<ImageTiles, ImageTiles._Fields>, java.io.Serializable, Cloneable, Comparable<ImageTiles> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImageTiles");

  private static final org.apache.thrift.protocol.TField SCALED_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("scaledSize", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("tileSize", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TILES_URLS_FIELD_DESC = new org.apache.thrift.protocol.TField("tilesUrls", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ImageTilesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ImageTilesTupleSchemeFactory());
  }

  public Size scaledSize; // required
  public Size tileSize; // required
  public List<List<String>> tilesUrls; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCALED_SIZE((short)1, "scaledSize"),
    TILE_SIZE((short)2, "tileSize"),
    TILES_URLS((short)3, "tilesUrls");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCALED_SIZE
          return SCALED_SIZE;
        case 2: // TILE_SIZE
          return TILE_SIZE;
        case 3: // TILES_URLS
          return TILES_URLS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCALED_SIZE, new org.apache.thrift.meta_data.FieldMetaData("scaledSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Size.class)));
    tmpMap.put(_Fields.TILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("tileSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Size.class)));
    tmpMap.put(_Fields.TILES_URLS, new org.apache.thrift.meta_data.FieldMetaData("tilesUrls", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImageTiles.class, metaDataMap);
  }

  public ImageTiles() {
  }

  public ImageTiles(
    Size scaledSize,
    Size tileSize,
    List<List<String>> tilesUrls)
  {
    this();
    this.scaledSize = scaledSize;
    this.tileSize = tileSize;
    this.tilesUrls = tilesUrls;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImageTiles(ImageTiles other) {
    if (other.isSetScaledSize()) {
      this.scaledSize = new Size(other.scaledSize);
    }
    if (other.isSetTileSize()) {
      this.tileSize = new Size(other.tileSize);
    }
    if (other.isSetTilesUrls()) {
      List<List<String>> __this__tilesUrls = new ArrayList<List<String>>(other.tilesUrls.size());
      for (List<String> other_element : other.tilesUrls) {
        List<String> __this__tilesUrls_copy = new ArrayList<String>(other_element);
        __this__tilesUrls.add(__this__tilesUrls_copy);
      }
      this.tilesUrls = __this__tilesUrls;
    }
  }

  public ImageTiles deepCopy() {
    return new ImageTiles(this);
  }

  @Override
  public void clear() {
    this.scaledSize = null;
    this.tileSize = null;
    this.tilesUrls = null;
  }

  public Size getScaledSize() {
    return this.scaledSize;
  }

  public ImageTiles setScaledSize(Size scaledSize) {
    this.scaledSize = scaledSize;
    return this;
  }

  public void unsetScaledSize() {
    this.scaledSize = null;
  }

  /** Returns true if field scaledSize is set (has been assigned a value) and false otherwise */
  public boolean isSetScaledSize() {
    return this.scaledSize != null;
  }

  public void setScaledSizeIsSet(boolean value) {
    if (!value) {
      this.scaledSize = null;
    }
  }

  public Size getTileSize() {
    return this.tileSize;
  }

  public ImageTiles setTileSize(Size tileSize) {
    this.tileSize = tileSize;
    return this;
  }

  public void unsetTileSize() {
    this.tileSize = null;
  }

  /** Returns true if field tileSize is set (has been assigned a value) and false otherwise */
  public boolean isSetTileSize() {
    return this.tileSize != null;
  }

  public void setTileSizeIsSet(boolean value) {
    if (!value) {
      this.tileSize = null;
    }
  }

  public int getTilesUrlsSize() {
    return (this.tilesUrls == null) ? 0 : this.tilesUrls.size();
  }

  public java.util.Iterator<List<String>> getTilesUrlsIterator() {
    return (this.tilesUrls == null) ? null : this.tilesUrls.iterator();
  }

  public void addToTilesUrls(List<String> elem) {
    if (this.tilesUrls == null) {
      this.tilesUrls = new ArrayList<List<String>>();
    }
    this.tilesUrls.add(elem);
  }

  public List<List<String>> getTilesUrls() {
    return this.tilesUrls;
  }

  public ImageTiles setTilesUrls(List<List<String>> tilesUrls) {
    this.tilesUrls = tilesUrls;
    return this;
  }

  public void unsetTilesUrls() {
    this.tilesUrls = null;
  }

  /** Returns true if field tilesUrls is set (has been assigned a value) and false otherwise */
  public boolean isSetTilesUrls() {
    return this.tilesUrls != null;
  }

  public void setTilesUrlsIsSet(boolean value) {
    if (!value) {
      this.tilesUrls = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCALED_SIZE:
      if (value == null) {
        unsetScaledSize();
      } else {
        setScaledSize((Size)value);
      }
      break;

    case TILE_SIZE:
      if (value == null) {
        unsetTileSize();
      } else {
        setTileSize((Size)value);
      }
      break;

    case TILES_URLS:
      if (value == null) {
        unsetTilesUrls();
      } else {
        setTilesUrls((List<List<String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCALED_SIZE:
      return getScaledSize();

    case TILE_SIZE:
      return getTileSize();

    case TILES_URLS:
      return getTilesUrls();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCALED_SIZE:
      return isSetScaledSize();
    case TILE_SIZE:
      return isSetTileSize();
    case TILES_URLS:
      return isSetTilesUrls();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ImageTiles)
      return this.equals((ImageTiles)that);
    return false;
  }

  public boolean equals(ImageTiles that) {
    if (that == null)
      return false;

    boolean this_present_scaledSize = true && this.isSetScaledSize();
    boolean that_present_scaledSize = true && that.isSetScaledSize();
    if (this_present_scaledSize || that_present_scaledSize) {
      if (!(this_present_scaledSize && that_present_scaledSize))
        return false;
      if (!this.scaledSize.equals(that.scaledSize))
        return false;
    }

    boolean this_present_tileSize = true && this.isSetTileSize();
    boolean that_present_tileSize = true && that.isSetTileSize();
    if (this_present_tileSize || that_present_tileSize) {
      if (!(this_present_tileSize && that_present_tileSize))
        return false;
      if (!this.tileSize.equals(that.tileSize))
        return false;
    }

    boolean this_present_tilesUrls = true && this.isSetTilesUrls();
    boolean that_present_tilesUrls = true && that.isSetTilesUrls();
    if (this_present_tilesUrls || that_present_tilesUrls) {
      if (!(this_present_tilesUrls && that_present_tilesUrls))
        return false;
      if (!this.tilesUrls.equals(that.tilesUrls))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_scaledSize = true && (isSetScaledSize());
    list.add(present_scaledSize);
    if (present_scaledSize)
      list.add(scaledSize);

    boolean present_tileSize = true && (isSetTileSize());
    list.add(present_tileSize);
    if (present_tileSize)
      list.add(tileSize);

    boolean present_tilesUrls = true && (isSetTilesUrls());
    list.add(present_tilesUrls);
    if (present_tilesUrls)
      list.add(tilesUrls);

    return list.hashCode();
  }

  @Override
  public int compareTo(ImageTiles other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetScaledSize()).compareTo(other.isSetScaledSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScaledSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scaledSize, other.scaledSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTileSize()).compareTo(other.isSetTileSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTileSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tileSize, other.tileSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTilesUrls()).compareTo(other.isSetTilesUrls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTilesUrls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tilesUrls, other.tilesUrls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ImageTiles(");
    boolean first = true;

    sb.append("scaledSize:");
    if (this.scaledSize == null) {
      sb.append("null");
    } else {
      sb.append(this.scaledSize);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tileSize:");
    if (this.tileSize == null) {
      sb.append("null");
    } else {
      sb.append(this.tileSize);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tilesUrls:");
    if (this.tilesUrls == null) {
      sb.append("null");
    } else {
      sb.append(this.tilesUrls);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (scaledSize != null) {
      scaledSize.validate();
    }
    if (tileSize != null) {
      tileSize.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImageTilesStandardSchemeFactory implements SchemeFactory {
    public ImageTilesStandardScheme getScheme() {
      return new ImageTilesStandardScheme();
    }
  }

  private static class ImageTilesStandardScheme extends StandardScheme<ImageTiles> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ImageTiles struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCALED_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.scaledSize = new Size();
              struct.scaledSize.read(iprot);
              struct.setScaledSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tileSize = new Size();
              struct.tileSize.read(iprot);
              struct.setTileSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TILES_URLS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.tilesUrls = new ArrayList<List<String>>(_list10.size);
                List<String> _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  {
                    org.apache.thrift.protocol.TList _list13 = iprot.readListBegin();
                    _elem11 = new ArrayList<String>(_list13.size);
                    String _elem14;
                    for (int _i15 = 0; _i15 < _list13.size; ++_i15)
                    {
                      _elem14 = iprot.readString();
                      _elem11.add(_elem14);
                    }
                    iprot.readListEnd();
                  }
                  struct.tilesUrls.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setTilesUrlsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ImageTiles struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.scaledSize != null) {
        oprot.writeFieldBegin(SCALED_SIZE_FIELD_DESC);
        struct.scaledSize.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tileSize != null) {
        oprot.writeFieldBegin(TILE_SIZE_FIELD_DESC);
        struct.tileSize.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tilesUrls != null) {
        oprot.writeFieldBegin(TILES_URLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.tilesUrls.size()));
          for (List<String> _iter16 : struct.tilesUrls)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter16.size()));
              for (String _iter17 : _iter16)
              {
                oprot.writeString(_iter17);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImageTilesTupleSchemeFactory implements SchemeFactory {
    public ImageTilesTupleScheme getScheme() {
      return new ImageTilesTupleScheme();
    }
  }

  private static class ImageTilesTupleScheme extends TupleScheme<ImageTiles> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ImageTiles struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetScaledSize()) {
        optionals.set(0);
      }
      if (struct.isSetTileSize()) {
        optionals.set(1);
      }
      if (struct.isSetTilesUrls()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetScaledSize()) {
        struct.scaledSize.write(oprot);
      }
      if (struct.isSetTileSize()) {
        struct.tileSize.write(oprot);
      }
      if (struct.isSetTilesUrls()) {
        {
          oprot.writeI32(struct.tilesUrls.size());
          for (List<String> _iter18 : struct.tilesUrls)
          {
            {
              oprot.writeI32(_iter18.size());
              for (String _iter19 : _iter18)
              {
                oprot.writeString(_iter19);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ImageTiles struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.scaledSize = new Size();
        struct.scaledSize.read(iprot);
        struct.setScaledSizeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tileSize = new Size();
        struct.tileSize.read(iprot);
        struct.setTileSizeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.tilesUrls = new ArrayList<List<String>>(_list20.size);
          List<String> _elem21;
          for (int _i22 = 0; _i22 < _list20.size; ++_i22)
          {
            {
              org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem21 = new ArrayList<String>(_list23.size);
              String _elem24;
              for (int _i25 = 0; _i25 < _list23.size; ++_i25)
              {
                _elem24 = iprot.readString();
                _elem21.add(_elem24);
              }
            }
            struct.tilesUrls.add(_elem21);
          }
        }
        struct.setTilesUrlsIsSet(true);
      }
    }
  }

}

