/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cnk.communication;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-03")
public class RawReportEvent implements org.apache.thrift.TBase<RawReportEvent, RawReportEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RawReportEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RawReportEvent");

  private static final org.apache.thrift.protocol.TField EXHIBIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exhibitId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DURATION_IN_SECS_FIELD_DESC = new org.apache.thrift.protocol.TField("durationInSecs", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ACTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("actions", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RawReportEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RawReportEventTupleSchemeFactory());
  }

  public int exhibitId; // optional
  public int durationInSecs; // required
  public List<Integer> actions; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXHIBIT_ID((short)1, "exhibitId"),
    DURATION_IN_SECS((short)2, "durationInSecs"),
    ACTIONS((short)3, "actions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXHIBIT_ID
          return EXHIBIT_ID;
        case 2: // DURATION_IN_SECS
          return DURATION_IN_SECS;
        case 3: // ACTIONS
          return ACTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXHIBITID_ISSET_ID = 0;
  private static final int __DURATIONINSECS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EXHIBIT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXHIBIT_ID, new org.apache.thrift.meta_data.FieldMetaData("exhibitId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DURATION_IN_SECS, new org.apache.thrift.meta_data.FieldMetaData("durationInSecs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIONS, new org.apache.thrift.meta_data.FieldMetaData("actions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RawReportEvent.class, metaDataMap);
  }

  public RawReportEvent() {
  }

  public RawReportEvent(
    int durationInSecs,
    List<Integer> actions)
  {
    this();
    this.durationInSecs = durationInSecs;
    setDurationInSecsIsSet(true);
    this.actions = actions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RawReportEvent(RawReportEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.exhibitId = other.exhibitId;
    this.durationInSecs = other.durationInSecs;
    if (other.isSetActions()) {
      List<Integer> __this__actions = new ArrayList<Integer>(other.actions);
      this.actions = __this__actions;
    }
  }

  public RawReportEvent deepCopy() {
    return new RawReportEvent(this);
  }

  @Override
  public void clear() {
    setExhibitIdIsSet(false);
    this.exhibitId = 0;
    setDurationInSecsIsSet(false);
    this.durationInSecs = 0;
    this.actions = null;
  }

  public int getExhibitId() {
    return this.exhibitId;
  }

  public RawReportEvent setExhibitId(int exhibitId) {
    this.exhibitId = exhibitId;
    setExhibitIdIsSet(true);
    return this;
  }

  public void unsetExhibitId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXHIBITID_ISSET_ID);
  }

  /** Returns true if field exhibitId is set (has been assigned a value) and false otherwise */
  public boolean isSetExhibitId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXHIBITID_ISSET_ID);
  }

  public void setExhibitIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXHIBITID_ISSET_ID, value);
  }

  public int getDurationInSecs() {
    return this.durationInSecs;
  }

  public RawReportEvent setDurationInSecs(int durationInSecs) {
    this.durationInSecs = durationInSecs;
    setDurationInSecsIsSet(true);
    return this;
  }

  public void unsetDurationInSecs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURATIONINSECS_ISSET_ID);
  }

  /** Returns true if field durationInSecs is set (has been assigned a value) and false otherwise */
  public boolean isSetDurationInSecs() {
    return EncodingUtils.testBit(__isset_bitfield, __DURATIONINSECS_ISSET_ID);
  }

  public void setDurationInSecsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURATIONINSECS_ISSET_ID, value);
  }

  public int getActionsSize() {
    return (this.actions == null) ? 0 : this.actions.size();
  }

  public java.util.Iterator<Integer> getActionsIterator() {
    return (this.actions == null) ? null : this.actions.iterator();
  }

  public void addToActions(int elem) {
    if (this.actions == null) {
      this.actions = new ArrayList<Integer>();
    }
    this.actions.add(elem);
  }

  public List<Integer> getActions() {
    return this.actions;
  }

  public RawReportEvent setActions(List<Integer> actions) {
    this.actions = actions;
    return this;
  }

  public void unsetActions() {
    this.actions = null;
  }

  /** Returns true if field actions is set (has been assigned a value) and false otherwise */
  public boolean isSetActions() {
    return this.actions != null;
  }

  public void setActionsIsSet(boolean value) {
    if (!value) {
      this.actions = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXHIBIT_ID:
      if (value == null) {
        unsetExhibitId();
      } else {
        setExhibitId((Integer)value);
      }
      break;

    case DURATION_IN_SECS:
      if (value == null) {
        unsetDurationInSecs();
      } else {
        setDurationInSecs((Integer)value);
      }
      break;

    case ACTIONS:
      if (value == null) {
        unsetActions();
      } else {
        setActions((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXHIBIT_ID:
      return getExhibitId();

    case DURATION_IN_SECS:
      return getDurationInSecs();

    case ACTIONS:
      return getActions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXHIBIT_ID:
      return isSetExhibitId();
    case DURATION_IN_SECS:
      return isSetDurationInSecs();
    case ACTIONS:
      return isSetActions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RawReportEvent)
      return this.equals((RawReportEvent)that);
    return false;
  }

  public boolean equals(RawReportEvent that) {
    if (that == null)
      return false;

    boolean this_present_exhibitId = true && this.isSetExhibitId();
    boolean that_present_exhibitId = true && that.isSetExhibitId();
    if (this_present_exhibitId || that_present_exhibitId) {
      if (!(this_present_exhibitId && that_present_exhibitId))
        return false;
      if (this.exhibitId != that.exhibitId)
        return false;
    }

    boolean this_present_durationInSecs = true;
    boolean that_present_durationInSecs = true;
    if (this_present_durationInSecs || that_present_durationInSecs) {
      if (!(this_present_durationInSecs && that_present_durationInSecs))
        return false;
      if (this.durationInSecs != that.durationInSecs)
        return false;
    }

    boolean this_present_actions = true && this.isSetActions();
    boolean that_present_actions = true && that.isSetActions();
    if (this_present_actions || that_present_actions) {
      if (!(this_present_actions && that_present_actions))
        return false;
      if (!this.actions.equals(that.actions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_exhibitId = true && (isSetExhibitId());
    list.add(present_exhibitId);
    if (present_exhibitId)
      list.add(exhibitId);

    boolean present_durationInSecs = true;
    list.add(present_durationInSecs);
    if (present_durationInSecs)
      list.add(durationInSecs);

    boolean present_actions = true && (isSetActions());
    list.add(present_actions);
    if (present_actions)
      list.add(actions);

    return list.hashCode();
  }

  @Override
  public int compareTo(RawReportEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExhibitId()).compareTo(other.isSetExhibitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExhibitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exhibitId, other.exhibitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDurationInSecs()).compareTo(other.isSetDurationInSecs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDurationInSecs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durationInSecs, other.durationInSecs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActions()).compareTo(other.isSetActions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actions, other.actions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RawReportEvent(");
    boolean first = true;

    if (isSetExhibitId()) {
      sb.append("exhibitId:");
      sb.append(this.exhibitId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("durationInSecs:");
    sb.append(this.durationInSecs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actions:");
    if (this.actions == null) {
      sb.append("null");
    } else {
      sb.append(this.actions);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RawReportEventStandardSchemeFactory implements SchemeFactory {
    public RawReportEventStandardScheme getScheme() {
      return new RawReportEventStandardScheme();
    }
  }

  private static class RawReportEventStandardScheme extends StandardScheme<RawReportEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RawReportEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXHIBIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exhibitId = iprot.readI32();
              struct.setExhibitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DURATION_IN_SECS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.durationInSecs = iprot.readI32();
              struct.setDurationInSecsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                struct.actions = new ArrayList<Integer>(_list20.size);
                int _elem21;
                for (int _i22 = 0; _i22 < _list20.size; ++_i22)
                {
                  _elem21 = iprot.readI32();
                  struct.actions.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setActionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RawReportEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetExhibitId()) {
        oprot.writeFieldBegin(EXHIBIT_ID_FIELD_DESC);
        oprot.writeI32(struct.exhibitId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DURATION_IN_SECS_FIELD_DESC);
      oprot.writeI32(struct.durationInSecs);
      oprot.writeFieldEnd();
      if (struct.actions != null) {
        oprot.writeFieldBegin(ACTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.actions.size()));
          for (int _iter23 : struct.actions)
          {
            oprot.writeI32(_iter23);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RawReportEventTupleSchemeFactory implements SchemeFactory {
    public RawReportEventTupleScheme getScheme() {
      return new RawReportEventTupleScheme();
    }
  }

  private static class RawReportEventTupleScheme extends TupleScheme<RawReportEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RawReportEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExhibitId()) {
        optionals.set(0);
      }
      if (struct.isSetDurationInSecs()) {
        optionals.set(1);
      }
      if (struct.isSetActions()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetExhibitId()) {
        oprot.writeI32(struct.exhibitId);
      }
      if (struct.isSetDurationInSecs()) {
        oprot.writeI32(struct.durationInSecs);
      }
      if (struct.isSetActions()) {
        {
          oprot.writeI32(struct.actions.size());
          for (int _iter24 : struct.actions)
          {
            oprot.writeI32(_iter24);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RawReportEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.exhibitId = iprot.readI32();
        struct.setExhibitIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.durationInSecs = iprot.readI32();
        struct.setDurationInSecsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.actions = new ArrayList<Integer>(_list25.size);
          int _elem26;
          for (int _i27 = 0; _i27 < _list25.size; ++_i27)
          {
            _elem26 = iprot.readI32();
            struct.actions.add(_elem26);
          }
        }
        struct.setActionsIsSet(true);
      }
    }
  }

}

