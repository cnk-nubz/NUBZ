/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cnk.communication;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-03")
public class RawReport implements org.apache.thrift.TBase<RawReport, RawReport._Fields>, java.io.Serializable, Cloneable, Comparable<RawReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RawReport");

  private static final org.apache.thrift.protocol.TField REPORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reportId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HISTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("history", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RawReportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RawReportTupleSchemeFactory());
  }

  public int reportId; // required
  public List<RawReportEvent> history; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPORT_ID((short)1, "reportId"),
    HISTORY((short)2, "history");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPORT_ID
          return REPORT_ID;
        case 2: // HISTORY
          return HISTORY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REPORTID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPORT_ID, new org.apache.thrift.meta_data.FieldMetaData("reportId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HISTORY, new org.apache.thrift.meta_data.FieldMetaData("history", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RawReportEvent.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RawReport.class, metaDataMap);
  }

  public RawReport() {
  }

  public RawReport(
    int reportId,
    List<RawReportEvent> history)
  {
    this();
    this.reportId = reportId;
    setReportIdIsSet(true);
    this.history = history;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RawReport(RawReport other) {
    __isset_bitfield = other.__isset_bitfield;
    this.reportId = other.reportId;
    if (other.isSetHistory()) {
      List<RawReportEvent> __this__history = new ArrayList<RawReportEvent>(other.history.size());
      for (RawReportEvent other_element : other.history) {
        __this__history.add(new RawReportEvent(other_element));
      }
      this.history = __this__history;
    }
  }

  public RawReport deepCopy() {
    return new RawReport(this);
  }

  @Override
  public void clear() {
    setReportIdIsSet(false);
    this.reportId = 0;
    this.history = null;
  }

  public int getReportId() {
    return this.reportId;
  }

  public RawReport setReportId(int reportId) {
    this.reportId = reportId;
    setReportIdIsSet(true);
    return this;
  }

  public void unsetReportId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORTID_ISSET_ID);
  }

  /** Returns true if field reportId is set (has been assigned a value) and false otherwise */
  public boolean isSetReportId() {
    return EncodingUtils.testBit(__isset_bitfield, __REPORTID_ISSET_ID);
  }

  public void setReportIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORTID_ISSET_ID, value);
  }

  public int getHistorySize() {
    return (this.history == null) ? 0 : this.history.size();
  }

  public java.util.Iterator<RawReportEvent> getHistoryIterator() {
    return (this.history == null) ? null : this.history.iterator();
  }

  public void addToHistory(RawReportEvent elem) {
    if (this.history == null) {
      this.history = new ArrayList<RawReportEvent>();
    }
    this.history.add(elem);
  }

  public List<RawReportEvent> getHistory() {
    return this.history;
  }

  public RawReport setHistory(List<RawReportEvent> history) {
    this.history = history;
    return this;
  }

  public void unsetHistory() {
    this.history = null;
  }

  /** Returns true if field history is set (has been assigned a value) and false otherwise */
  public boolean isSetHistory() {
    return this.history != null;
  }

  public void setHistoryIsSet(boolean value) {
    if (!value) {
      this.history = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REPORT_ID:
      if (value == null) {
        unsetReportId();
      } else {
        setReportId((Integer)value);
      }
      break;

    case HISTORY:
      if (value == null) {
        unsetHistory();
      } else {
        setHistory((List<RawReportEvent>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REPORT_ID:
      return getReportId();

    case HISTORY:
      return getHistory();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REPORT_ID:
      return isSetReportId();
    case HISTORY:
      return isSetHistory();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RawReport)
      return this.equals((RawReport)that);
    return false;
  }

  public boolean equals(RawReport that) {
    if (that == null)
      return false;

    boolean this_present_reportId = true;
    boolean that_present_reportId = true;
    if (this_present_reportId || that_present_reportId) {
      if (!(this_present_reportId && that_present_reportId))
        return false;
      if (this.reportId != that.reportId)
        return false;
    }

    boolean this_present_history = true && this.isSetHistory();
    boolean that_present_history = true && that.isSetHistory();
    if (this_present_history || that_present_history) {
      if (!(this_present_history && that_present_history))
        return false;
      if (!this.history.equals(that.history))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_reportId = true;
    list.add(present_reportId);
    if (present_reportId)
      list.add(reportId);

    boolean present_history = true && (isSetHistory());
    list.add(present_history);
    if (present_history)
      list.add(history);

    return list.hashCode();
  }

  @Override
  public int compareTo(RawReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReportId()).compareTo(other.isSetReportId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportId, other.reportId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHistory()).compareTo(other.isSetHistory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHistory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.history, other.history);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RawReport(");
    boolean first = true;

    sb.append("reportId:");
    sb.append(this.reportId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("history:");
    if (this.history == null) {
      sb.append("null");
    } else {
      sb.append(this.history);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RawReportStandardSchemeFactory implements SchemeFactory {
    public RawReportStandardScheme getScheme() {
      return new RawReportStandardScheme();
    }
  }

  private static class RawReportStandardScheme extends StandardScheme<RawReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RawReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPORT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reportId = iprot.readI32();
              struct.setReportIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HISTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                struct.history = new ArrayList<RawReportEvent>(_list28.size);
                RawReportEvent _elem29;
                for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                {
                  _elem29 = new RawReportEvent();
                  _elem29.read(iprot);
                  struct.history.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setHistoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RawReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REPORT_ID_FIELD_DESC);
      oprot.writeI32(struct.reportId);
      oprot.writeFieldEnd();
      if (struct.history != null) {
        oprot.writeFieldBegin(HISTORY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.history.size()));
          for (RawReportEvent _iter31 : struct.history)
          {
            _iter31.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RawReportTupleSchemeFactory implements SchemeFactory {
    public RawReportTupleScheme getScheme() {
      return new RawReportTupleScheme();
    }
  }

  private static class RawReportTupleScheme extends TupleScheme<RawReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RawReport struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReportId()) {
        optionals.set(0);
      }
      if (struct.isSetHistory()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetReportId()) {
        oprot.writeI32(struct.reportId);
      }
      if (struct.isSetHistory()) {
        {
          oprot.writeI32(struct.history.size());
          for (RawReportEvent _iter32 : struct.history)
          {
            _iter32.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RawReport struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.reportId = iprot.readI32();
        struct.setReportIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.history = new ArrayList<RawReportEvent>(_list33.size);
          RawReportEvent _elem34;
          for (int _i35 = 0; _i35 < _list33.size; ++_i35)
          {
            _elem34 = new RawReportEvent();
            _elem34.read(iprot);
            struct.history.add(_elem34);
          }
        }
        struct.setHistoryIsSet(true);
      }
    }
  }

}

