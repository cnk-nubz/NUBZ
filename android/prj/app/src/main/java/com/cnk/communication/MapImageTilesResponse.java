/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cnk.communication;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-11")
public class MapImageTilesResponse implements org.apache.thrift.TBase<MapImageTilesResponse, MapImageTilesResponse._Fields>, java.io.Serializable, Cloneable, Comparable<MapImageTilesResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MapImageTilesResponse");

  private static final org.apache.thrift.protocol.TField ORIGINAL_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("originalSize", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ZOOM_LEVELS_FIELD_DESC = new org.apache.thrift.protocol.TField("zoomLevels", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MapImageTilesResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MapImageTilesResponseTupleSchemeFactory());
  }

  public Size originalSize; // required
  public List<ImageTiles> zoomLevels; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORIGINAL_SIZE((short)1, "originalSize"),
    ZOOM_LEVELS((short)2, "zoomLevels");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORIGINAL_SIZE
          return ORIGINAL_SIZE;
        case 2: // ZOOM_LEVELS
          return ZOOM_LEVELS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORIGINAL_SIZE, new org.apache.thrift.meta_data.FieldMetaData("originalSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Size.class)));
    tmpMap.put(_Fields.ZOOM_LEVELS, new org.apache.thrift.meta_data.FieldMetaData("zoomLevels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ImageTiles.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MapImageTilesResponse.class, metaDataMap);
  }

  public MapImageTilesResponse() {
  }

  public MapImageTilesResponse(
    Size originalSize,
    List<ImageTiles> zoomLevels)
  {
    this();
    this.originalSize = originalSize;
    this.zoomLevels = zoomLevels;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MapImageTilesResponse(MapImageTilesResponse other) {
    if (other.isSetOriginalSize()) {
      this.originalSize = new Size(other.originalSize);
    }
    if (other.isSetZoomLevels()) {
      List<ImageTiles> __this__zoomLevels = new ArrayList<ImageTiles>(other.zoomLevels.size());
      for (ImageTiles other_element : other.zoomLevels) {
        __this__zoomLevels.add(new ImageTiles(other_element));
      }
      this.zoomLevels = __this__zoomLevels;
    }
  }

  public MapImageTilesResponse deepCopy() {
    return new MapImageTilesResponse(this);
  }

  @Override
  public void clear() {
    this.originalSize = null;
    this.zoomLevels = null;
  }

  public Size getOriginalSize() {
    return this.originalSize;
  }

  public MapImageTilesResponse setOriginalSize(Size originalSize) {
    this.originalSize = originalSize;
    return this;
  }

  public void unsetOriginalSize() {
    this.originalSize = null;
  }

  /** Returns true if field originalSize is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalSize() {
    return this.originalSize != null;
  }

  public void setOriginalSizeIsSet(boolean value) {
    if (!value) {
      this.originalSize = null;
    }
  }

  public int getZoomLevelsSize() {
    return (this.zoomLevels == null) ? 0 : this.zoomLevels.size();
  }

  public java.util.Iterator<ImageTiles> getZoomLevelsIterator() {
    return (this.zoomLevels == null) ? null : this.zoomLevels.iterator();
  }

  public void addToZoomLevels(ImageTiles elem) {
    if (this.zoomLevels == null) {
      this.zoomLevels = new ArrayList<ImageTiles>();
    }
    this.zoomLevels.add(elem);
  }

  public List<ImageTiles> getZoomLevels() {
    return this.zoomLevels;
  }

  public MapImageTilesResponse setZoomLevels(List<ImageTiles> zoomLevels) {
    this.zoomLevels = zoomLevels;
    return this;
  }

  public void unsetZoomLevels() {
    this.zoomLevels = null;
  }

  /** Returns true if field zoomLevels is set (has been assigned a value) and false otherwise */
  public boolean isSetZoomLevels() {
    return this.zoomLevels != null;
  }

  public void setZoomLevelsIsSet(boolean value) {
    if (!value) {
      this.zoomLevels = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORIGINAL_SIZE:
      if (value == null) {
        unsetOriginalSize();
      } else {
        setOriginalSize((Size)value);
      }
      break;

    case ZOOM_LEVELS:
      if (value == null) {
        unsetZoomLevels();
      } else {
        setZoomLevels((List<ImageTiles>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORIGINAL_SIZE:
      return getOriginalSize();

    case ZOOM_LEVELS:
      return getZoomLevels();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORIGINAL_SIZE:
      return isSetOriginalSize();
    case ZOOM_LEVELS:
      return isSetZoomLevels();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MapImageTilesResponse)
      return this.equals((MapImageTilesResponse)that);
    return false;
  }

  public boolean equals(MapImageTilesResponse that) {
    if (that == null)
      return false;

    boolean this_present_originalSize = true && this.isSetOriginalSize();
    boolean that_present_originalSize = true && that.isSetOriginalSize();
    if (this_present_originalSize || that_present_originalSize) {
      if (!(this_present_originalSize && that_present_originalSize))
        return false;
      if (!this.originalSize.equals(that.originalSize))
        return false;
    }

    boolean this_present_zoomLevels = true && this.isSetZoomLevels();
    boolean that_present_zoomLevels = true && that.isSetZoomLevels();
    if (this_present_zoomLevels || that_present_zoomLevels) {
      if (!(this_present_zoomLevels && that_present_zoomLevels))
        return false;
      if (!this.zoomLevels.equals(that.zoomLevels))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_originalSize = true && (isSetOriginalSize());
    list.add(present_originalSize);
    if (present_originalSize)
      list.add(originalSize);

    boolean present_zoomLevels = true && (isSetZoomLevels());
    list.add(present_zoomLevels);
    if (present_zoomLevels)
      list.add(zoomLevels);

    return list.hashCode();
  }

  @Override
  public int compareTo(MapImageTilesResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOriginalSize()).compareTo(other.isSetOriginalSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalSize, other.originalSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZoomLevels()).compareTo(other.isSetZoomLevels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZoomLevels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zoomLevels, other.zoomLevels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MapImageTilesResponse(");
    boolean first = true;

    sb.append("originalSize:");
    if (this.originalSize == null) {
      sb.append("null");
    } else {
      sb.append(this.originalSize);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zoomLevels:");
    if (this.zoomLevels == null) {
      sb.append("null");
    } else {
      sb.append(this.zoomLevels);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (originalSize != null) {
      originalSize.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MapImageTilesResponseStandardSchemeFactory implements SchemeFactory {
    public MapImageTilesResponseStandardScheme getScheme() {
      return new MapImageTilesResponseStandardScheme();
    }
  }

  private static class MapImageTilesResponseStandardScheme extends StandardScheme<MapImageTilesResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MapImageTilesResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORIGINAL_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.originalSize = new Size();
              struct.originalSize.read(iprot);
              struct.setOriginalSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ZOOM_LEVELS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.zoomLevels = new ArrayList<ImageTiles>(_list26.size);
                ImageTiles _elem27;
                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                {
                  _elem27 = new ImageTiles();
                  _elem27.read(iprot);
                  struct.zoomLevels.add(_elem27);
                }
                iprot.readListEnd();
              }
              struct.setZoomLevelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MapImageTilesResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.originalSize != null) {
        oprot.writeFieldBegin(ORIGINAL_SIZE_FIELD_DESC);
        struct.originalSize.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.zoomLevels != null) {
        oprot.writeFieldBegin(ZOOM_LEVELS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.zoomLevels.size()));
          for (ImageTiles _iter29 : struct.zoomLevels)
          {
            _iter29.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MapImageTilesResponseTupleSchemeFactory implements SchemeFactory {
    public MapImageTilesResponseTupleScheme getScheme() {
      return new MapImageTilesResponseTupleScheme();
    }
  }

  private static class MapImageTilesResponseTupleScheme extends TupleScheme<MapImageTilesResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MapImageTilesResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOriginalSize()) {
        optionals.set(0);
      }
      if (struct.isSetZoomLevels()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetOriginalSize()) {
        struct.originalSize.write(oprot);
      }
      if (struct.isSetZoomLevels()) {
        {
          oprot.writeI32(struct.zoomLevels.size());
          for (ImageTiles _iter30 : struct.zoomLevels)
          {
            _iter30.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MapImageTilesResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.originalSize = new Size();
        struct.originalSize.read(iprot);
        struct.setOriginalSizeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.zoomLevels = new ArrayList<ImageTiles>(_list31.size);
          ImageTiles _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = new ImageTiles();
            _elem32.read(iprot);
            struct.zoomLevels.add(_elem32);
          }
        }
        struct.setZoomLevelsIsSet(true);
      }
    }
  }

}

