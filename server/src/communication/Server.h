/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Server_H
#define Server_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "server_types.h"

namespace communication {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ServerIf {
 public:
  virtual ~ServerIf() {}
  virtual void shutdown() = 0;
  virtual int32_t ping(const  ::communication::HelloMsg& msg) = 0;
  virtual void getMapImages( ::communication::MapImagesResponse& _return, const  ::communication::MapImagesRequest& request) = 0;
  virtual void setMapImage(const  ::communication::SetMapImageRequest& request) = 0;
};

class ServerIfFactory {
 public:
  typedef ServerIf Handler;

  virtual ~ServerIfFactory() {}

  virtual ServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ServerIf* /* handler */) = 0;
};

class ServerIfSingletonFactory : virtual public ServerIfFactory {
 public:
  ServerIfSingletonFactory(const boost::shared_ptr<ServerIf>& iface) : iface_(iface) {}
  virtual ~ServerIfSingletonFactory() {}

  virtual ServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ServerIf* /* handler */) {}

 protected:
  boost::shared_ptr<ServerIf> iface_;
};

class ServerNull : virtual public ServerIf {
 public:
  virtual ~ServerNull() {}
  void shutdown() {
    return;
  }
  int32_t ping(const  ::communication::HelloMsg& /* msg */) {
    int32_t _return = 0;
    return _return;
  }
  void getMapImages( ::communication::MapImagesResponse& /* _return */, const  ::communication::MapImagesRequest& /* request */) {
    return;
  }
  void setMapImage(const  ::communication::SetMapImageRequest& /* request */) {
    return;
  }
};


class Server_shutdown_args {
 public:

  Server_shutdown_args(const Server_shutdown_args&);
  Server_shutdown_args& operator=(const Server_shutdown_args&);
  Server_shutdown_args() {
  }

  virtual ~Server_shutdown_args() throw();

  bool operator == (const Server_shutdown_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Server_shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_shutdown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_shutdown_pargs {
 public:


  virtual ~Server_shutdown_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_shutdown_result {
 public:

  Server_shutdown_result(const Server_shutdown_result&);
  Server_shutdown_result& operator=(const Server_shutdown_result&);
  Server_shutdown_result() {
  }

  virtual ~Server_shutdown_result() throw();

  bool operator == (const Server_shutdown_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Server_shutdown_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_shutdown_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_shutdown_presult {
 public:


  virtual ~Server_shutdown_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_ping_args__isset {
  _Server_ping_args__isset() : msg(false) {}
  bool msg :1;
} _Server_ping_args__isset;

class Server_ping_args {
 public:

  Server_ping_args(const Server_ping_args&);
  Server_ping_args& operator=(const Server_ping_args&);
  Server_ping_args() {
  }

  virtual ~Server_ping_args() throw();
   ::communication::HelloMsg msg;

  _Server_ping_args__isset __isset;

  void __set_msg(const  ::communication::HelloMsg& val);

  bool operator == (const Server_ping_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const Server_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_ping_pargs {
 public:


  virtual ~Server_ping_pargs() throw();
  const  ::communication::HelloMsg* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_ping_result__isset {
  _Server_ping_result__isset() : success(false) {}
  bool success :1;
} _Server_ping_result__isset;

class Server_ping_result {
 public:

  Server_ping_result(const Server_ping_result&);
  Server_ping_result& operator=(const Server_ping_result&);
  Server_ping_result() : success(0) {
  }

  virtual ~Server_ping_result() throw();
  int32_t success;

  _Server_ping_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Server_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Server_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_ping_presult__isset {
  _Server_ping_presult__isset() : success(false) {}
  bool success :1;
} _Server_ping_presult__isset;

class Server_ping_presult {
 public:


  virtual ~Server_ping_presult() throw();
  int32_t* success;

  _Server_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_getMapImages_args__isset {
  _Server_getMapImages_args__isset() : request(false) {}
  bool request :1;
} _Server_getMapImages_args__isset;

class Server_getMapImages_args {
 public:

  Server_getMapImages_args(const Server_getMapImages_args&);
  Server_getMapImages_args& operator=(const Server_getMapImages_args&);
  Server_getMapImages_args() {
  }

  virtual ~Server_getMapImages_args() throw();
   ::communication::MapImagesRequest request;

  _Server_getMapImages_args__isset __isset;

  void __set_request(const  ::communication::MapImagesRequest& val);

  bool operator == (const Server_getMapImages_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Server_getMapImages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_getMapImages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_getMapImages_pargs {
 public:


  virtual ~Server_getMapImages_pargs() throw();
  const  ::communication::MapImagesRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_getMapImages_result__isset {
  _Server_getMapImages_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _Server_getMapImages_result__isset;

class Server_getMapImages_result {
 public:

  Server_getMapImages_result(const Server_getMapImages_result&);
  Server_getMapImages_result& operator=(const Server_getMapImages_result&);
  Server_getMapImages_result() {
  }

  virtual ~Server_getMapImages_result() throw();
   ::communication::MapImagesResponse success;
   ::communication::InternalError err;

  _Server_getMapImages_result__isset __isset;

  void __set_success(const  ::communication::MapImagesResponse& val);

  void __set_err(const  ::communication::InternalError& val);

  bool operator == (const Server_getMapImages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Server_getMapImages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_getMapImages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_getMapImages_presult__isset {
  _Server_getMapImages_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _Server_getMapImages_presult__isset;

class Server_getMapImages_presult {
 public:


  virtual ~Server_getMapImages_presult() throw();
   ::communication::MapImagesResponse* success;
   ::communication::InternalError err;

  _Server_getMapImages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_setMapImage_args__isset {
  _Server_setMapImage_args__isset() : request(false) {}
  bool request :1;
} _Server_setMapImage_args__isset;

class Server_setMapImage_args {
 public:

  Server_setMapImage_args(const Server_setMapImage_args&);
  Server_setMapImage_args& operator=(const Server_setMapImage_args&);
  Server_setMapImage_args() {
  }

  virtual ~Server_setMapImage_args() throw();
   ::communication::SetMapImageRequest request;

  _Server_setMapImage_args__isset __isset;

  void __set_request(const  ::communication::SetMapImageRequest& val);

  bool operator == (const Server_setMapImage_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Server_setMapImage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_setMapImage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_setMapImage_pargs {
 public:


  virtual ~Server_setMapImage_pargs() throw();
  const  ::communication::SetMapImageRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_setMapImage_result__isset {
  _Server_setMapImage_result__isset() : intErr(false), dataErr(false) {}
  bool intErr :1;
  bool dataErr :1;
} _Server_setMapImage_result__isset;

class Server_setMapImage_result {
 public:

  Server_setMapImage_result(const Server_setMapImage_result&);
  Server_setMapImage_result& operator=(const Server_setMapImage_result&);
  Server_setMapImage_result() {
  }

  virtual ~Server_setMapImage_result() throw();
   ::communication::InternalError intErr;
   ::communication::InvalidData dataErr;

  _Server_setMapImage_result__isset __isset;

  void __set_intErr(const  ::communication::InternalError& val);

  void __set_dataErr(const  ::communication::InvalidData& val);

  bool operator == (const Server_setMapImage_result & rhs) const
  {
    if (!(intErr == rhs.intErr))
      return false;
    if (!(dataErr == rhs.dataErr))
      return false;
    return true;
  }
  bool operator != (const Server_setMapImage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_setMapImage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_setMapImage_presult__isset {
  _Server_setMapImage_presult__isset() : intErr(false), dataErr(false) {}
  bool intErr :1;
  bool dataErr :1;
} _Server_setMapImage_presult__isset;

class Server_setMapImage_presult {
 public:


  virtual ~Server_setMapImage_presult() throw();
   ::communication::InternalError intErr;
   ::communication::InvalidData dataErr;

  _Server_setMapImage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ServerClient : virtual public ServerIf {
 public:
  ServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void shutdown();
  void send_shutdown();
  void recv_shutdown();
  int32_t ping(const  ::communication::HelloMsg& msg);
  void send_ping(const  ::communication::HelloMsg& msg);
  int32_t recv_ping();
  void getMapImages( ::communication::MapImagesResponse& _return, const  ::communication::MapImagesRequest& request);
  void send_getMapImages(const  ::communication::MapImagesRequest& request);
  void recv_getMapImages( ::communication::MapImagesResponse& _return);
  void setMapImage(const  ::communication::SetMapImageRequest& request);
  void send_setMapImage(const  ::communication::SetMapImageRequest& request);
  void recv_setMapImage();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_shutdown(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMapImages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setMapImage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ServerProcessor(boost::shared_ptr<ServerIf> iface) :
    iface_(iface) {
    processMap_["shutdown"] = &ServerProcessor::process_shutdown;
    processMap_["ping"] = &ServerProcessor::process_ping;
    processMap_["getMapImages"] = &ServerProcessor::process_getMapImages;
    processMap_["setMapImage"] = &ServerProcessor::process_setMapImage;
  }

  virtual ~ServerProcessor() {}
};

class ServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ServerProcessorFactory(const ::boost::shared_ptr< ServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ServerIfFactory > handlerFactory_;
};

class ServerMultiface : virtual public ServerIf {
 public:
  ServerMultiface(std::vector<boost::shared_ptr<ServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ServerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ServerIf> > ifaces_;
  ServerMultiface() {}
  void add(boost::shared_ptr<ServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void shutdown() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shutdown();
    }
    ifaces_[i]->shutdown();
  }

  int32_t ping(const  ::communication::HelloMsg& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(msg);
    }
    return ifaces_[i]->ping(msg);
  }

  void getMapImages( ::communication::MapImagesResponse& _return, const  ::communication::MapImagesRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMapImages(_return, request);
    }
    ifaces_[i]->getMapImages(_return, request);
    return;
  }

  void setMapImage(const  ::communication::SetMapImageRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setMapImage(request);
    }
    ifaces_[i]->setMapImage(request);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ServerConcurrentClient : virtual public ServerIf {
 public:
  ServerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ServerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void shutdown();
  int32_t send_shutdown();
  void recv_shutdown(const int32_t seqid);
  int32_t ping(const  ::communication::HelloMsg& msg);
  int32_t send_ping(const  ::communication::HelloMsg& msg);
  int32_t recv_ping(const int32_t seqid);
  void getMapImages( ::communication::MapImagesResponse& _return, const  ::communication::MapImagesRequest& request);
  int32_t send_getMapImages(const  ::communication::MapImagesRequest& request);
  void recv_getMapImages( ::communication::MapImagesResponse& _return, const int32_t seqid);
  void setMapImage(const  ::communication::SetMapImageRequest& request);
  int32_t send_setMapImage(const  ::communication::SetMapImageRequest& request);
  void recv_setMapImage(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
