/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef structs_TYPES_H
#define structs_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace communication {

class InternalError;

class InvalidData;

class HelloMsg;

class MapImagesRequest;

class MapImagesResponse;

class SetMapImageRequest;

class ExhibitsRequest;

class MapElementFrame;

class Exhibit;

class ExhibitsResponse;

class RawReportEvent;

class RawReport;


class InternalError : public ::apache::thrift::TException {
 public:

  InternalError(const InternalError&);
  InternalError& operator=(const InternalError&);
  InternalError() {
  }

  virtual ~InternalError() throw();

  bool operator == (const InternalError & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InternalError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InternalError & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InternalError &a, InternalError &b);

inline std::ostream& operator<<(std::ostream& out, const InternalError& obj)
{
  obj.printTo(out);
  return out;
}


class InvalidData : public ::apache::thrift::TException {
 public:

  InvalidData(const InvalidData&);
  InvalidData& operator=(const InvalidData&);
  InvalidData() {
  }

  virtual ~InvalidData() throw();

  bool operator == (const InvalidData & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InvalidData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidData &a, InvalidData &b);

inline std::ostream& operator<<(std::ostream& out, const InvalidData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _HelloMsg__isset {
  _HelloMsg__isset() : num(false), msg(false) {}
  bool num :1;
  bool msg :1;
} _HelloMsg__isset;

class HelloMsg {
 public:

  HelloMsg(const HelloMsg&);
  HelloMsg& operator=(const HelloMsg&);
  HelloMsg() : num(0), msg() {
  }

  virtual ~HelloMsg() throw();
  int32_t num;
  std::string msg;

  _HelloMsg__isset __isset;

  void __set_num(const int32_t val);

  void __set_msg(const std::string& val);

  bool operator == (const HelloMsg & rhs) const
  {
    if (!(num == rhs.num))
      return false;
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const HelloMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HelloMsg &a, HelloMsg &b);

inline std::ostream& operator<<(std::ostream& out, const HelloMsg& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _MapImagesRequest__isset {
  _MapImagesRequest__isset() : acquiredVersion(false) {}
  bool acquiredVersion :1;
} _MapImagesRequest__isset;

class MapImagesRequest {
 public:

  MapImagesRequest(const MapImagesRequest&);
  MapImagesRequest& operator=(const MapImagesRequest&);
  MapImagesRequest() : acquiredVersion(0) {
  }

  virtual ~MapImagesRequest() throw();
  int32_t acquiredVersion;

  _MapImagesRequest__isset __isset;

  void __set_acquiredVersion(const int32_t val);

  bool operator == (const MapImagesRequest & rhs) const
  {
    if (__isset.acquiredVersion != rhs.__isset.acquiredVersion)
      return false;
    else if (__isset.acquiredVersion && !(acquiredVersion == rhs.acquiredVersion))
      return false;
    return true;
  }
  bool operator != (const MapImagesRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapImagesRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MapImagesRequest &a, MapImagesRequest &b);

inline std::ostream& operator<<(std::ostream& out, const MapImagesRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _MapImagesResponse__isset {
  _MapImagesResponse__isset() : version(false), levelImageUrls(false) {}
  bool version :1;
  bool levelImageUrls :1;
} _MapImagesResponse__isset;

class MapImagesResponse {
 public:

  MapImagesResponse(const MapImagesResponse&);
  MapImagesResponse& operator=(const MapImagesResponse&);
  MapImagesResponse() : version(0) {
  }

  virtual ~MapImagesResponse() throw();
  int32_t version;
  std::map<int32_t, std::string>  levelImageUrls;

  _MapImagesResponse__isset __isset;

  void __set_version(const int32_t val);

  void __set_levelImageUrls(const std::map<int32_t, std::string> & val);

  bool operator == (const MapImagesResponse & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(levelImageUrls == rhs.levelImageUrls))
      return false;
    return true;
  }
  bool operator != (const MapImagesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapImagesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MapImagesResponse &a, MapImagesResponse &b);

inline std::ostream& operator<<(std::ostream& out, const MapImagesResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SetMapImageRequest__isset {
  _SetMapImageRequest__isset() : level(false), filename(false) {}
  bool level :1;
  bool filename :1;
} _SetMapImageRequest__isset;

class SetMapImageRequest {
 public:

  SetMapImageRequest(const SetMapImageRequest&);
  SetMapImageRequest& operator=(const SetMapImageRequest&);
  SetMapImageRequest() : level(0), filename() {
  }

  virtual ~SetMapImageRequest() throw();
  int32_t level;
  std::string filename;

  _SetMapImageRequest__isset __isset;

  void __set_level(const int32_t val);

  void __set_filename(const std::string& val);

  bool operator == (const SetMapImageRequest & rhs) const
  {
    if (!(level == rhs.level))
      return false;
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const SetMapImageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetMapImageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SetMapImageRequest &a, SetMapImageRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SetMapImageRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ExhibitsRequest__isset {
  _ExhibitsRequest__isset() : acquiredVersion(false) {}
  bool acquiredVersion :1;
} _ExhibitsRequest__isset;

class ExhibitsRequest {
 public:

  ExhibitsRequest(const ExhibitsRequest&);
  ExhibitsRequest& operator=(const ExhibitsRequest&);
  ExhibitsRequest() : acquiredVersion(0) {
  }

  virtual ~ExhibitsRequest() throw();
  int32_t acquiredVersion;

  _ExhibitsRequest__isset __isset;

  void __set_acquiredVersion(const int32_t val);

  bool operator == (const ExhibitsRequest & rhs) const
  {
    if (__isset.acquiredVersion != rhs.__isset.acquiredVersion)
      return false;
    else if (__isset.acquiredVersion && !(acquiredVersion == rhs.acquiredVersion))
      return false;
    return true;
  }
  bool operator != (const ExhibitsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExhibitsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ExhibitsRequest &a, ExhibitsRequest &b);

inline std::ostream& operator<<(std::ostream& out, const ExhibitsRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _MapElementFrame__isset {
  _MapElementFrame__isset() : x(false), y(false), width(false), height(false), mapLevel(false) {}
  bool x :1;
  bool y :1;
  bool width :1;
  bool height :1;
  bool mapLevel :1;
} _MapElementFrame__isset;

class MapElementFrame {
 public:

  MapElementFrame(const MapElementFrame&);
  MapElementFrame& operator=(const MapElementFrame&);
  MapElementFrame() : x(0), y(0), width(0), height(0), mapLevel(0) {
  }

  virtual ~MapElementFrame() throw();
  int32_t x;
  int32_t y;
  int32_t width;
  int32_t height;
  int32_t mapLevel;

  _MapElementFrame__isset __isset;

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  void __set_mapLevel(const int32_t val);

  bool operator == (const MapElementFrame & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    if (!(mapLevel == rhs.mapLevel))
      return false;
    return true;
  }
  bool operator != (const MapElementFrame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapElementFrame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MapElementFrame &a, MapElementFrame &b);

inline std::ostream& operator<<(std::ostream& out, const MapElementFrame& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Exhibit__isset {
  _Exhibit__isset() : name(false), frame(false) {}
  bool name :1;
  bool frame :1;
} _Exhibit__isset;

class Exhibit {
 public:

  Exhibit(const Exhibit&);
  Exhibit& operator=(const Exhibit&);
  Exhibit() : name() {
  }

  virtual ~Exhibit() throw();
  std::string name;
  MapElementFrame frame;

  _Exhibit__isset __isset;

  void __set_name(const std::string& val);

  void __set_frame(const MapElementFrame& val);

  bool operator == (const Exhibit & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (__isset.frame != rhs.__isset.frame)
      return false;
    else if (__isset.frame && !(frame == rhs.frame))
      return false;
    return true;
  }
  bool operator != (const Exhibit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Exhibit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Exhibit &a, Exhibit &b);

inline std::ostream& operator<<(std::ostream& out, const Exhibit& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ExhibitsResponse__isset {
  _ExhibitsResponse__isset() : version(false), exhibits(false) {}
  bool version :1;
  bool exhibits :1;
} _ExhibitsResponse__isset;

class ExhibitsResponse {
 public:

  ExhibitsResponse(const ExhibitsResponse&);
  ExhibitsResponse& operator=(const ExhibitsResponse&);
  ExhibitsResponse() : version(0) {
  }

  virtual ~ExhibitsResponse() throw();
  int32_t version;
  std::map<int32_t, Exhibit>  exhibits;

  _ExhibitsResponse__isset __isset;

  void __set_version(const int32_t val);

  void __set_exhibits(const std::map<int32_t, Exhibit> & val);

  bool operator == (const ExhibitsResponse & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(exhibits == rhs.exhibits))
      return false;
    return true;
  }
  bool operator != (const ExhibitsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExhibitsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ExhibitsResponse &a, ExhibitsResponse &b);

inline std::ostream& operator<<(std::ostream& out, const ExhibitsResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RawReportEvent__isset {
  _RawReportEvent__isset() : exhibitId(false), durationInSecs(false), actions(false) {}
  bool exhibitId :1;
  bool durationInSecs :1;
  bool actions :1;
} _RawReportEvent__isset;

class RawReportEvent {
 public:

  RawReportEvent(const RawReportEvent&);
  RawReportEvent& operator=(const RawReportEvent&);
  RawReportEvent() : exhibitId(0), durationInSecs(0) {
  }

  virtual ~RawReportEvent() throw();
  int32_t exhibitId;
  int32_t durationInSecs;
  std::vector<int32_t>  actions;

  _RawReportEvent__isset __isset;

  void __set_exhibitId(const int32_t val);

  void __set_durationInSecs(const int32_t val);

  void __set_actions(const std::vector<int32_t> & val);

  bool operator == (const RawReportEvent & rhs) const
  {
    if (__isset.exhibitId != rhs.__isset.exhibitId)
      return false;
    else if (__isset.exhibitId && !(exhibitId == rhs.exhibitId))
      return false;
    if (!(durationInSecs == rhs.durationInSecs))
      return false;
    if (!(actions == rhs.actions))
      return false;
    return true;
  }
  bool operator != (const RawReportEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawReportEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RawReportEvent &a, RawReportEvent &b);

inline std::ostream& operator<<(std::ostream& out, const RawReportEvent& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RawReport__isset {
  _RawReport__isset() : reportId(false), history(false) {}
  bool reportId :1;
  bool history :1;
} _RawReport__isset;

class RawReport {
 public:

  RawReport(const RawReport&);
  RawReport& operator=(const RawReport&);
  RawReport() : reportId(0) {
  }

  virtual ~RawReport() throw();
  int32_t reportId;
  std::vector<RawReportEvent>  history;

  _RawReport__isset __isset;

  void __set_reportId(const int32_t val);

  void __set_history(const std::vector<RawReportEvent> & val);

  bool operator == (const RawReport & rhs) const
  {
    if (!(reportId == rhs.reportId))
      return false;
    if (!(history == rhs.history))
      return false;
    return true;
  }
  bool operator != (const RawReport &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawReport & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RawReport &a, RawReport &b);

inline std::ostream& operator<<(std::ostream& out, const RawReport& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
