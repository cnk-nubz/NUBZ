/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef structs_TYPES_H
#define structs_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace communication {

class HelloMsg;

typedef struct _HelloMsg__isset {
  _HelloMsg__isset() : num(false), msg(false) {}
  bool num :1;
  bool msg :1;
} _HelloMsg__isset;

class HelloMsg {
 public:

  HelloMsg(const HelloMsg&);
  HelloMsg& operator=(const HelloMsg&);
  HelloMsg() : num(0), msg() {
  }

  virtual ~HelloMsg() throw();
  int32_t num;
  std::string msg;

  _HelloMsg__isset __isset;

  void __set_num(const int32_t val);

  void __set_msg(const std::string& val);

  bool operator == (const HelloMsg & rhs) const
  {
    if (!(num == rhs.num))
      return false;
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const HelloMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HelloMsg &a, HelloMsg &b);

inline std::ostream& operator<<(std::ostream& out, const HelloMsg& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
